class Solution {
private:
    void dfs(int row, int col, vector<vector<int>> &temp, int &cnt){
        
        temp[row][col] = 0;
        int n = temp.size(), m = temp[0].size();
        
        int drow[] = {-1, 0, 1, 0};
        int dcol[] = {0, 1, 0, -1};
        
        for(int i=0; i<4; i++){
            
            int nrow = row + drow[i];
            int ncol = col + dcol[i];
            
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && temp[nrow][ncol] == 1){
                cnt++;
                dfs(nrow, ncol, temp ,cnt);
            }
        }
    }
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        
        int n = grid.size(), m = grid[0].size();
        int maxArea = 0;
        vector<vector<int>> temp = grid;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                
                if(temp[i][j] == 1){
                    int cnt = 1;
                    dfs(i, j, temp, cnt);
                    maxArea = max(maxArea, cnt);
                }
            }
        }
        return maxArea;
    }
};
