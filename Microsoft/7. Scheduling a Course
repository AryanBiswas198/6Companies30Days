class Solution {
public:
    bool dfs(int node, unordered_map<int, list<int>> &adj, unordered_map<int, bool> &vis, unordered_map<int, bool> &dfsVis){
        
        vis[node] = dfsVis[node] = true;
        
        for(auto nbr: adj[node]){
            
            if(!vis[nbr]){
                
                bool ans = dfs(nbr, adj, vis, dfsVis);
                
                if(ans){
                    return true;
                }
            }
            else if(dfsVis[nbr]){
                return true;
            }
        }
        
        dfsVis[node] = false;
        return false;
    }
    
    bool canFinish(int numCourses, vector<vector<int>>& pre) {
         
        int e = pre.size();
        
        unordered_map<int, list<int>> adj;
        
        for(int i=0; i<e; i++){
            
            int u = pre[i][0];
            int v = pre[i][1];
            
            adj[u].push_back(v);
        }
        
        unordered_map<int, bool> vis;
        unordered_map<int, bool> dfsVis;
        
        for(int i=0; i<numCourses; i++){
            
            if(!vis[i]){
                
                bool ans = dfs(i, adj, vis, dfsVis);
                
                if(ans){
                    return false;
                }
            }
        }
        return true;
    }
};
